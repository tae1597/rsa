//rsa

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.logging.*;

public class RSALogging {
    
    // Logger per tracciare l'esecuzione
    private static final Logger logger = Logger.getLogger(RSALogging.class.getName());
    
    public static void main(String[] args) {
        logger.setLevel(Level.ALL);
        

        logger.info("Inizio generazione delle chiavi RSA.");
        KeyPair keyPair = generateRSAKeyPair();
        logger.info("Generazione delle chiavi RSA completata.");
        logger.info("Chiave pubblica: " + keyPair.getPublicKey());
        logger.info("Chiave privata: " + keyPair.getPrivateKey());
    }


    public static KeyPair generateRSAKeyPair() {
        SecureRandom random = new SecureRandom();
        
        logger.info("Generazione di p e q.");
        BigInteger p = generatePrime(512, random);
        BigInteger q = generatePrime(512, random);
        logger.info("Numero primo p: " + p);
        logger.info("Numero primo q: " + q);
        

        BigInteger n = p.multiply(q);
        logger.info("Calcolo di n (n = p * q): " + n);
        

        BigInteger phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));
        logger.info("Calcolo di Ï†(n): " + phi);
        

        BigInteger e = BigInteger.valueOf(65537);  
        logger.info("Scelta dell'esponente pubblico e: " + e);
        

        BigInteger d = e.modInverse(phi);
        logger.info("Calcolo dell'esponente privato d: " + d);
        

        KeyPair keyPair = new KeyPair(n, e, d);
        return keyPair;
    }

    // Funzione per generare un numero primo di lunghezza bit specificata
    public static BigInteger generatePrime(int bitLength, SecureRandom random) {
        BigInteger prime;
        do {
            prime = new BigInteger(bitLength, random);
        } while (!prime.isProbablePrime(100));  
        return prime;
    }

    // Classe che rappresenta una coppia di chiavi RSA
    static class KeyPair {
        private BigInteger n;
        private BigInteger publicKey;
        private BigInteger privateKey;

        public KeyPair(BigInteger n, BigInteger publicKey, BigInteger privateKey) {
            this.n = n;
            this.publicKey = publicKey;
            this.privateKey = privateKey;
        }

        public BigInteger getPublicKey() {
            return publicKey;
        }

        public BigInteger getPrivateKey() {
            return privateKey;
        }
    }
}

